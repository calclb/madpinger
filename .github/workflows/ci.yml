on:
  push:
    branches: ["main", "madpinger-*.x"]
  pull_request:
    branches: ["main", "madpinger-*.x"]

name: CI

env:
  RUSTFLAGS: -D warnings # -Dwarnings
  RUST_BACKTRACE: 1
  # Change to specific Rust release to pin
  rust_stable: stable
  rust_clippy: 1.65.0
  # When updating this, also update:
  # - README.md
  # - madpinger/Cargo.toml
  rust_min: 1.65.0

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  # Depends on all action that are required for a "successful" CI run.
  tests-pass:
    name: all systems go
    runs-on: ubuntu-latest
    needs:
      - test
      - semver
      - minrust
      - fmt
      - clippy
    steps:
      - run: exit 0

  test:
    name: test madpinger
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: ${{ env.rust_stable }}
      - name: Install Rust
        run: rustup update stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
        
      - name: test madpinger
        run: cargo test
        # working-directory: madpinger
        
  semver:
    name: semver
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.rust_stable }}
      - name: Install cargo-semver-checks
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks
      - name: Check semver compatibility
        run: |
          cargo semver-checks check-release --release-type minor

  fmt:
    name: fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_stable }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.rust_stable }}
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      # Check fmt
      - name: "rustfmt --check"
        run: |
          if ! rustfmt --check --edition 2022 $(git ls-files '*.rs'); then
            printf "Please run \`rustfmt --edition 2022 \$(git ls-files '*.rs')\` to fix rustfmt errors.\nSee CONTRIBUTING.md for more details.\n" >&2
            exit 1
          fi
          
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_clippy }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.rust_clippy }}
          components: clippy
      - uses: Swatinem/rust-cache@v2
      # Run clippy
      - name: "clippy --all"
        run: cargo clippy --all --tests --all-features

  minrust: # checks that the program compiles on the minimum supported rust
    name: minrust 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rust_min }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.rust_min }}
      - uses: Swatinem/rust-cache@v2
      - name: "check -p madpinger --all-features"
        run: cargo check -p madpinger --all-features
        env:
          RUSTFLAGS: "" # remove -Dwarnings
      # - name: "check --workspace --all-features"
        # run: cargo check --workspace --all-features
        # env:
          # RUSTFLAGS: "" # remove -Dwarnings
